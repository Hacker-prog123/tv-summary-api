{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f83798d-a457-4624-88b9-4a2793a7e838",
   "metadata": {},
   "outputs": [],
   "source": [
    "# === tv_summary.py ===\n",
    "def run_tv_summary(main_file_bytes, rr_file_bytes):\n",
    "    import pandas as pd\n",
    "    from openpyxl import load_workbook\n",
    "    from io import BytesIO\n",
    "\n",
    "    main_file = BytesIO(main_file_bytes)\n",
    "    rr_file = BytesIO(rr_file_bytes)\n",
    "\n",
    "    df = pd.read_excel(main_file, sheet_name=\"TV\")\n",
    "    esn_df = pd.read_excel(main_file, sheet_name=\"ESN\", usecols=\"B:E\")\n",
    "    rr_df_full = pd.read_excel(rr_file, sheet_name=\"Export\")\n",
    "\n",
    "    def clean_esn(val):\n",
    "        val = str(val).strip().replace(\"\\n\", \"\").replace(\"\\r\", \"\").replace(\"\\xa0\", \"\").replace(\" \", \"\")\n",
    "        if val.replace('.', '', 1).isdigit():\n",
    "            val = str(int(float(val)))\n",
    "        return val\n",
    "\n",
    "    df[\"Engine Number (Ex)\"] = df[\"Engine Number (Ex)\"].map(clean_esn)\n",
    "    current_week_esns = pd.concat([esn_df[col] for col in esn_df.columns]).dropna().map(clean_esn).unique()\n",
    "    df_current_week = df[df[\"Engine Number (Ex)\"].isin(current_week_esns)].copy()\n",
    "\n",
    "    def classify_delivery_type(row):\n",
    "        status = str(row[\"SAESL Status\"]).strip()\n",
    "        gate = row.get(\"Gate\", None)\n",
    "        tvr_gate = str(row.get(\"TVR Gate Raised\", \"\")).strip().upper()\n",
    "        if pd.isna(status) or pd.isna(gate): return \"Undelivered\"\n",
    "        try: gate = int(gate)\n",
    "        except: return \"Undelivered\"\n",
    "        if gate == 1 and status == \"Under Review (approved TV)\": return \"TV Delivered\"\n",
    "        if gate == 1 and tvr_gate == \"0\": return \"Undelivered\"\n",
    "        if gate == 1 and tvr_gate == \"1\" and status == \"Under Review (approved TV)\": return \"TV Delivered\"\n",
    "        if gate == 1 and status == \"Cleared\" and tvr_gate == \"G0\": return \"TV Delivered\"\n",
    "        if gate == 2 and status == \"Cleared\" and tvr_gate in [\"G0\", \"G1\"]: return \"TV Delivered\"\n",
    "        if gate == 2 and status == \"Under Review (approved TV)\" and tvr_gate in [\"G0\", \"G1\"]: return \"TV Delivered\"\n",
    "        if gate in [1, 2] and status in [\"Under Review (draft)\", \"Under Review (MP Release)\", \"Cleared\", \"Cleared Mitigated\"]:\n",
    "            return \"HU/Draft Delivered\"\n",
    "        if gate in [3, 4] and status in [\"Cleared\", \"Cleared Mitigated\", \"Under Review (approved TV)\"]:\n",
    "            return \"TV Delivered\"\n",
    "        if status in [\"Need HU\", \"Need Draft\", \"Draft Clarification\", \"Need Approved TV\"]:\n",
    "            return \"Undelivered\"\n",
    "        return \"Undelivered\"\n",
    "\n",
    "    df[\"Delivery Type\"] = df.apply(classify_delivery_type, axis=1)\n",
    "    df_current_week[\"ESN\"] = df_current_week[\"Engine Number (Ex)\"]\n",
    "\n",
    "    current_week_summary = pd.DataFrame({\n",
    "        \"Metric\": [\n",
    "            \"Total ESNs in Current Week\", \"TV Delivered\", \"HU/Draft Delivered\", \"Undelivered\", \"Delivery Rate (%)\"\n",
    "        ],\n",
    "        \"Value\": [\n",
    "            len(df_current_week),\n",
    "            (df_current_week[\"Delivery Type\"] == \"TV Delivered\").sum(),\n",
    "            (df_current_week[\"Delivery Type\"] == \"HU/Draft Delivered\").sum(),\n",
    "            (df_current_week[\"Delivery Type\"] == \"Undelivered\").sum(),\n",
    "            round(df_current_week[\"Delivery Type\"].isin([\"TV Delivered\", \"HU/Draft Delivered\"]).sum()/len(df_current_week)*100, 2) if len(df_current_week) else 0\n",
    "        ]\n",
    "    })\n",
    "\n",
    "    current_week_detail = df_current_week.groupby([\"ESN\", \"Gate\"]).agg(\n",
    "        HU_Draft_Delivered=(\"Delivery Type\", lambda x: (x == \"HU/Draft Delivered\").sum()),\n",
    "        TV_Delivered=(\"Delivery Type\", lambda x: (x == \"TV Delivered\").sum()),\n",
    "        Undelivered=(\"Delivery Type\", lambda x: (x == \"Undelivered\").sum())\n",
    "    ).reset_index()\n",
    "    current_week_detail[\"Total Delivered\"] = current_week_detail[\"HU_Draft_Delivered\"] + current_week_detail[\"TV_Delivered\"]\n",
    "    current_week_detail[\"Total Count\"] = current_week_detail[\"Total Delivered\"] + current_week_detail[\"Undelivered\"]\n",
    "    current_week_detail[\"Delivery %\"] = round(current_week_detail[\"Total Delivered\"] / current_week_detail[\"Total Count\"] * 100, 2)\n",
    "\n",
    "    delivery_type_breakdown = df[\"Delivery Type\"].value_counts().reset_index()\n",
    "    delivery_type_breakdown.columns = [\"Delivery Type\", \"Count\"]\n",
    "\n",
    "    gate_perf_all = df.groupby(\"Gate\").agg(\n",
    "        Total_TVs=(\"Custom ID\", \"count\"),\n",
    "        Delivered=(\"Delivery Type\", lambda x: x.isin([\"TV Delivered\", \"HU/Draft Delivered\"]).sum()),\n",
    "        TV_Delivered=(\"Delivery Type\", lambda x: (x == \"TV Delivered\").sum()),\n",
    "        HU_Draft_Delivered=(\"Delivery Type\", lambda x: (x == \"HU/Draft Delivered\").sum()),\n",
    "        Undelivered=(\"Delivery Type\", lambda x: (x == \"Undelivered\").sum())\n",
    "    ).reset_index()\n",
    "    gate_perf_all[\"Delivery %\"] = round(gate_perf_all[\"Delivered\"] / gate_perf_all[\"Total_TVs\"] * 100, 2)\n",
    "\n",
    "    summary_all_df = pd.DataFrame({\n",
    "        \"Metric\": [\"Total TVs in List\", \"Total Delivered (TV or HU)\", \"TV Delivered\", \"HU/Draft Delivered\", \"Total Undelivered\", \"Delivery Rate (%)\"],\n",
    "        \"Value\": [\n",
    "            len(df),\n",
    "            df[\"Delivery Type\"].isin([\"TV Delivered\", \"HU/Draft Delivered\"]).sum(),\n",
    "            (df[\"Delivery Type\"] == \"TV Delivered\").sum(),\n",
    "            (df[\"Delivery Type\"] == \"HU/Draft Delivered\").sum(),\n",
    "            (df[\"Delivery Type\"] == \"Undelivered\").sum(),\n",
    "            round(df[\"Delivery Type\"].isin([\"TV Delivered\", \"HU/Draft Delivered\"]).sum()/len(df)*100, 2) if len(df) else 0\n",
    "        ]\n",
    "    })\n",
    "\n",
    "    rr_file.seek(0)\n",
    "    wb = load_workbook(filename=rr_file, data_only=True)\n",
    "    ws = wb[\"Export\"]\n",
    "    green_tv_nos = [str(row[0].value).strip() for row in ws.iter_rows(min_row=2) if row[0].fill.start_color.rgb in (\"FF92D050\")]\n",
    "\n",
    "    rr_df = rr_df_full[(rr_df_full[\"Tag delivered?\"] == \"Yes\") & (rr_df_full[\"Applicant\"].str.strip() == \"SAESL\") & (rr_df_full[\"TV NO\"].astype(str).str.strip().isin(green_tv_nos))].copy()\n",
    "    rr_df[\"Custom ID\"] = rr_df[\"TV NO\"].astype(str).str.strip()\n",
    "    df[\"Custom ID\"] = df[\"Custom ID\"].astype(str).str.strip()\n",
    "    rr_df[\"Your Status\"] = rr_df[\"Custom ID\"].map(df.set_index(\"Custom ID\")[\"Delivery Type\"].to_dict()).fillna(\"Not Found\")\n",
    "    rr_df_status_map = df.set_index(\"Custom ID\")[\"SAESL Status\"].to_dict()\n",
    "    rr_df[\"Actual SAESL Status\"] = rr_df[\"Custom ID\"].map(rr_df_status_map)\n",
    "\n",
    "    rr_discrepancies = rr_df[rr_df[\"Your Status\"] == \"Undelivered\"][\n",
    "        [\"Custom ID\", \"Gate\", \"Your Status\", \"Actual SAESL Status\", \"Tag delivered?\"]].copy()\n",
    "    rr_discrepancies.columns = [\"TV Number\", \"Gate\", \"Your Status\", \"Actual SAESL Status\", \"RR Tag Delivered\"]\n",
    "\n",
    "    rr_gate_summary = rr_df.groupby(\"Gate\").agg(RR_Tagged_Delivered=(\"Custom ID\", \"count\")).reset_index()\n",
    "    true_status_breakdown = rr_df.groupby([\"Gate\", \"Your Status\"]).agg(Count=(\"Custom ID\", \"count\")).reset_index()\n",
    "    true_status_pivot = true_status_breakdown.pivot(index=\"Gate\", columns=\"Your Status\", values=\"Count\").fillna(0).reset_index()\n",
    "    true_status_pivot.columns.name = None\n",
    "\n",
    "    output = BytesIO()\n",
    "    with pd.ExcelWriter(output, engine=\"openpyxl\") as writer:\n",
    "        summary_all_df.to_excel(writer, sheet_name=\"Summary (All Tags)\", index=False)\n",
    "        current_week_summary.to_excel(writer, sheet_name=\"Current Week Summary\", index=False)\n",
    "        current_week_detail.to_excel(writer, sheet_name=\"Current Week ESN Detail\", index=False)\n",
    "        delivery_type_breakdown.to_excel(writer, sheet_name=\"Delivery Breakdown\", index=False)\n",
    "        gate_perf_all.to_excel(writer, sheet_name=\"Gate Perf (All TVs)\", index=False)\n",
    "        rr_discrepancies.to_excel(writer, sheet_name=\"RR Discrepancy\", index=False)\n",
    "        rr_gate_summary.to_excel(writer, sheet_name=\"RR Gate Summary\", index=False)\n",
    "        true_status_pivot.to_excel(writer, sheet_name=\"RR True Delivery Breakdown\", index=False)\n",
    "        df.to_excel(writer, sheet_name=\"Raw Data\", index=False)\n",
    "\n",
    "    output.seek(0)\n",
    "    return output\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
